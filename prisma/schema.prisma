generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  player        Player?
  
  // Game audit relations
  gamesCreated  Game[]   @relation("GameCreator")
  gamesUpdated  Game[]   @relation("GameUpdater")
  gamesDeleted  Game[]   @relation("GameDeleter")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id              String    @id @default(cuid())
  userId          String?   @unique
  nickname        String    @unique
  legajo          Int       @unique
  realName        String?
  nationality     String    @default("Argentina")
  tenhouName      String?
  mahjongSoulName String?
  
  // Ranking Information
  // NOTE: As of now (2024), ratings are fixed at 1500 and do not change.
  // A proper rating system will be implemented in the future as a parallel system to ranks.
  rating          Float     @default(1500)  // Currently fixed at 1500
  maxRating       Float     @default(1500)  // Currently fixed at 1500
  points          Int       @default(0)
  rank            String    @default("新人")
  rankProgress    Float     @default(0) // Progress to next rank (0-100)
  
  // Relationships
  user            User?     @relation(fields: [userId], references: [id])
  stats           Stats?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Game relationships
  eastGames       Game[]    @relation("EastPlayer")
  southGames      Game[]    @relation("SouthPlayer")
  westGames       Game[]    @relation("WestPlayer")
  northGames      Game[]    @relation("NorthPlayer")
}

model Stats {
  id              String   @id @default(cuid())
  playerId        String   @unique
  player          Player   @relation(fields: [playerId], references: [id])
  
  // Overall Stats
  totalGames      Int      @default(0)
  firstPlace      Int      @default(0)
  secondPlace     Int      @default(0)
  thirdPlace      Int      @default(0)
  fourthPlace     Int      @default(0)
  rentaiRate      Float    @default(0)
  avgPlacement    Float    @default(0)
  
  // Tonpuusen Stats
  tonpuusenGames  Int      @default(0)
  tonpuusenFirst  Int      @default(0)
  tonpuusenSecond Int      @default(0)
  tonpuusenThird  Int      @default(0)
  tonpuusenFourth Int      @default(0)
  tonpuusenRentai Float    @default(0)
  tonpuusenAvg    Float    @default(0)
  
  // Hanchan Stats
  hanchanGames    Int      @default(0)
  hanchanFirst    Int      @default(0)
  hanchanSecond   Int      @default(0)
  hanchanThird    Int      @default(0)
  hanchanFourth   Int      @default(0)
  hanchanRentai   Float    @default(0)
  hanchanAvg      Float    @default(0)
  
  // Rating History
  ratingHistory   RatingChange[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RatingChange {
  id              String   @id @default(cuid())
  statsId         String
  stats           Stats    @relation(fields: [statsId], references: [id])
  oldRating       Int
  newRating       Int
  change          Int
  gameId          String?
  game            Game?    @relation(fields: [gameId], references: [id])
  date            DateTime @default(now())
}

model Game {
  id              String   @id @default(cuid())
  date            DateTime @default(now())
  isHanchan       Boolean  @default(true)
  
  // Player positions and scores
  eastPlayerId    String
  eastScore       Int
  southPlayerId   String
  southScore      Int
  westPlayerId    String
  westScore       Int
  northPlayerId   String
  northScore      Int
  
  // Player relationships
  eastPlayer      Player   @relation("EastPlayer", fields: [eastPlayerId], references: [id])
  southPlayer     Player   @relation("SouthPlayer", fields: [southPlayerId], references: [id])
  westPlayer      Player   @relation("WestPlayer", fields: [westPlayerId], references: [id])
  northPlayer     Player   @relation("NorthPlayer", fields: [northPlayerId], references: [id])
  
  // Rating changes
  ratingChanges   RatingChange[]
  
  // Audit fields
  createdAt       DateTime @default(now())
  createdById     String
  createdBy       User     @relation("GameCreator", fields: [createdById], references: [id])
  updatedAt       DateTime @updatedAt
  updatedById     String?
  updatedBy       User?    @relation("GameUpdater", fields: [updatedById], references: [id])
  deletedAt       DateTime?
  deletedById     String?
  deletedBy       User?    @relation("GameDeleter", fields: [deletedById], references: [id])
  isDeleted       Boolean  @default(false)
  
  // Revision history
  previousVersionId String?   @unique
  previousVersion   Game?     @relation("GameHistory", fields: [previousVersionId], references: [id])
  nextVersion      Game?     @relation("GameHistory")
} 